<<<<<<< HEAD
{"version":3,"file":"withAndroidNotifications.js","names":["_configPlugins","data","require","_imageUtils","_fsExtra","_interopRequireDefault","_path","_withAndroidIcons","obj","__esModule","default","Colors","AndroidConfig","addMetaDataItemToMainApplication","getMainApplicationOrThrow","removeMetaDataItemFromMainApplication","Manifest","BASELINE_PIXEL_SIZE","META_DATA_NOTIFICATION_ICON","exports","META_DATA_NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON","NOTIFICATION_ICON_RESOURCE","NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON_COLOR_RESOURCE","withNotificationIcons","config","withDangerousMod","setNotificationIconAsync","modRequest","projectRoot","withNotificationIconColor","withAndroidColors","modResults","setNotificationIconColor","withNotificationManifest","withAndroidManifest","setNotificationConfig","getNotificationIcon","notification","icon","getNotificationColor","color","writeNotificationIconImageFilesAsync","removeNotificationIconImageFilesAsync","manifest","mainApplication","colors","assignColorValue","name","value","Promise","all","Object","values","dpiValues","map","folderName","scale","drawableFolderName","replace","dpiFolderPath","path","resolve","ANDROID_RES_PATH","fs","ensureDir","iconSizePx","resizedIcon","generateImageAsync","cacheType","src","width","height","resizeMode","backgroundColor","source","writeFile","e","Error","remove"],"sources":["../../../../src/plugins/unversioned/expo-notifications/withAndroidNotifications.ts"],"sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withAndroidManifest,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ANDROID_RES_PATH, dpiValues } from '../../icons/withAndroidIcons';\n\nconst { Colors } = AndroidConfig;\nconst {\n  addMetaDataItemToMainApplication,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} = AndroidConfig.Manifest;\n\ntype AndroidManifest = AndroidConfig.Manifest.AndroidManifest;\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = (config) => {\n  return withDangerousMod(config, [\n    'android',\n    async (config) => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = (config) => {\n  return withAndroidColors(config, (config) => {\n    config.modResults = setNotificationIconColor(config, config.modResults);\n    return config;\n  });\n};\n\nexport const withNotificationManifest: ConfigPlugin = (config) => {\n  return withAndroidManifest(config, (config) => {\n    config.modResults = setNotificationConfig(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport function setNotificationConfig(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport function setNotificationIconColor(\n  config: ExpoConfig,\n  colors: AndroidConfig.Resources.ResourceXML\n) {\n  return Colors.assignColorValue(colors, {\n    name: NOTIFICATION_ICON_COLOR,\n    value: getNotificationColor(config),\n  });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../../../src/plugins/unversioned/expo-notifications/withAndroidNotifications.ts"],"names":["Colors","AndroidConfig","addMetaDataItemToMainApplication","getMainApplicationOrThrow","removeMetaDataItemFromMainApplication","Manifest","BASELINE_PIXEL_SIZE","META_DATA_NOTIFICATION_ICON","META_DATA_NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON","NOTIFICATION_ICON_RESOURCE","NOTIFICATION_ICON_COLOR","NOTIFICATION_ICON_COLOR_RESOURCE","withNotificationIcons","config","setNotificationIconAsync","modRequest","projectRoot","withNotificationIconColor","modResults","setNotificationIconColor","withNotificationManifest","setNotificationConfig","getNotificationIcon","notification","icon","getNotificationColor","color","writeNotificationIconImageFilesAsync","removeNotificationIconImageFilesAsync","manifest","mainApplication","colors","assignColorValue","name","value","Promise","all","Object","values","dpiValues","map","folderName","scale","drawableFolderName","replace","dpiFolderPath","path","resolve","ANDROID_RES_PATH","fs","ensureDir","iconSizePx","resizedIcon","cacheType","src","width","height","resizeMode","backgroundColor","source","writeFile","e","Error","remove"],"mappings":"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","sourcesContent":["import {\n  AndroidConfig,\n  ConfigPlugin,\n  withAndroidColors,\n  withAndroidManifest,\n  withDangerousMod,\n} from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\nimport { generateImageAsync } from '@expo/image-utils';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { ANDROID_RES_PATH, dpiValues } from '../../icons/withAndroidIcons';\n\nconst { Colors } = AndroidConfig;\nconst {\n  addMetaDataItemToMainApplication,\n  getMainApplicationOrThrow,\n  removeMetaDataItemFromMainApplication,\n} = AndroidConfig.Manifest;\n\ntype AndroidManifest = AndroidConfig.Manifest.AndroidManifest;\nconst BASELINE_PIXEL_SIZE = 24;\nexport const META_DATA_NOTIFICATION_ICON = 'expo.modules.notifications.default_notification_icon';\nexport const META_DATA_NOTIFICATION_ICON_COLOR =\n  'expo.modules.notifications.default_notification_color';\nexport const NOTIFICATION_ICON = 'notification_icon';\nexport const NOTIFICATION_ICON_RESOURCE = `@drawable/${NOTIFICATION_ICON}`;\nexport const NOTIFICATION_ICON_COLOR = 'notification_icon_color';\nexport const NOTIFICATION_ICON_COLOR_RESOURCE = `@color/${NOTIFICATION_ICON_COLOR}`;\n\nexport const withNotificationIcons: ConfigPlugin = config => {\n  return withDangerousMod(config, [\n    'android',\n    async config => {\n      await setNotificationIconAsync(config, config.modRequest.projectRoot);\n      return config;\n    },\n  ]);\n};\n\nexport const withNotificationIconColor: ConfigPlugin = config => {\n  return withAndroidColors(config, config => {\n    config.modResults = setNotificationIconColor(config, config.modResults);\n    return config;\n  });\n};\n\nexport const withNotificationManifest: ConfigPlugin = config => {\n  return withAndroidManifest(config, config => {\n    config.modResults = setNotificationConfig(config, config.modResults);\n    return config;\n  });\n};\n\nexport function getNotificationIcon(config: ExpoConfig) {\n  return config.notification?.icon || null;\n}\n\nexport function getNotificationColor(config: ExpoConfig) {\n  return config.notification?.color || null;\n}\n\n/**\n * Applies configuration for expo-notifications, including\n * the notification icon and notification color.\n */\nexport async function setNotificationIconAsync(config: ExpoConfig, projectRoot: string) {\n  const icon = getNotificationIcon(config);\n  if (icon) {\n    await writeNotificationIconImageFilesAsync(icon, projectRoot);\n  } else {\n    await removeNotificationIconImageFilesAsync(projectRoot);\n  }\n}\n\nexport function setNotificationConfig(config: ExpoConfig, manifest: AndroidManifest) {\n  const icon = getNotificationIcon(config);\n  const color = getNotificationColor(config);\n  const mainApplication = getMainApplicationOrThrow(manifest);\n  if (icon) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON,\n      NOTIFICATION_ICON_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON);\n  }\n  if (color) {\n    addMetaDataItemToMainApplication(\n      mainApplication,\n      META_DATA_NOTIFICATION_ICON_COLOR,\n      NOTIFICATION_ICON_COLOR_RESOURCE,\n      'resource'\n    );\n  } else {\n    removeMetaDataItemFromMainApplication(mainApplication, META_DATA_NOTIFICATION_ICON_COLOR);\n  }\n  return manifest;\n}\n\nexport function setNotificationIconColor(\n  config: ExpoConfig,\n  colors: AndroidConfig.Resources.ResourceXML\n) {\n  return Colors.assignColorValue(colors, {\n    name: NOTIFICATION_ICON_COLOR,\n    value: getNotificationColor(config),\n  });\n}\n\nasync function writeNotificationIconImageFilesAsync(icon: string, projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName, scale }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.ensureDir(dpiFolderPath);\n      const iconSizePx = BASELINE_PIXEL_SIZE * scale;\n\n      try {\n        const resizedIcon = (\n          await generateImageAsync(\n            { projectRoot, cacheType: 'android-notification' },\n            {\n              src: icon,\n              width: iconSizePx,\n              height: iconSizePx,\n              resizeMode: 'cover',\n              backgroundColor: 'transparent',\n            }\n          )\n        ).source;\n        await fs.writeFile(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'), resizedIcon);\n      } catch (e) {\n        throw new Error('Encountered an issue resizing Android notification icon: ' + e);\n      }\n    })\n  );\n}\n\nasync function removeNotificationIconImageFilesAsync(projectRoot: string) {\n  await Promise.all(\n    Object.values(dpiValues).map(async ({ folderName }) => {\n      const drawableFolderName = folderName.replace('mipmap', 'drawable');\n      const dpiFolderPath = path.resolve(projectRoot, ANDROID_RES_PATH, drawableFolderName);\n      await fs.remove(path.resolve(dpiFolderPath, NOTIFICATION_ICON + '.png'));\n    })\n  );\n}\n"],"file":"withAndroidNotifications.js"}
>>>>>>> 279c076d3cb6520341221d8adc510e9dbdcbb7c2
