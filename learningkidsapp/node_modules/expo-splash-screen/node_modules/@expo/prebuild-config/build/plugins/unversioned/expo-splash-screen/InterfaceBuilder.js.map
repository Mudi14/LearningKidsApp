<<<<<<< HEAD
{"version":3,"file":"InterfaceBuilder.js","names":["_crypto","data","_interopRequireDefault","require","_xml2js","obj","__esModule","default","debug","createConstraint","firstItem","firstAttribute","secondItem","secondAttribute","constant","$","id","createConstraintId","attributes","crypto","createHash","update","join","digest","IMAGE_ID","CONTAINER_ID","removeImageFromSplashScreen","xml","imageName","mainView","document","scenes","scene","objects","viewController","view","removeExisting","subviews","imageView","getAbsoluteConstraints","forEach","constraint","constrainsArray","constraints","imageSection","resources","image","existingImageIndex","findIndex","name","splice","childId","parentId","applyImageToSplashScreenXML","contentMode","width","height","userLabel","horizontalHuggingPriority","verticalHuggingPriority","clipsSubviews","userInteractionEnabled","translatesAutoresizingMaskIntoConstraints","rect","key","x","y","ensureUniquePush","push","array","item","existingItem","toString","builder","Builder","preserveChildrenOrder","xmldec","version","encoding","renderOpts","pretty","indent","buildObject","toObjectAsync","contents","Parser","parseStringPromise"],"sources":["../../../../src/plugins/unversioned/expo-splash-screen/InterfaceBuilder.ts"],"sourcesContent":["import crypto from 'crypto';\nimport { Builder, Parser } from 'xml2js';\n\nconst debug = require('debug')(\n  'expo:prebuild-config:expo-splash-screen:ios:InterfaceBuilder'\n) as typeof console.log;\n\nexport type IBBoolean = 'YES' | 'NO' | boolean;\n\nexport type IBItem<\n  H extends Record<string, any>,\n  B extends Record<string, any[]> = { [key: string]: any },\n> = {\n  $: H;\n} & B;\n\nexport type Rect = {\n  key: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type IBRect = IBItem<Rect>;\n\nexport type IBAutoresizingMask = IBItem<{\n  /** @example `autoresizingMask` */\n  key: string;\n  flexibleMaxX: IBBoolean;\n  flexibleMaxY: IBBoolean;\n}>;\n\n/** @example `<color key=\"textColor\" systemColor=\"linkColor\"/>` */\nexport type IBColor = IBItem<\n  {\n    /** @example `textColor` */\n    key: string;\n  } & (\n    | /** Custom color */\n    {\n        /** @example `0.86584504117670746` */\n        red: number;\n        /** @example `0.26445041990630447` */\n        green: number;\n        /** @example `0.3248577810203549` */\n        blue: number;\n        /** @example `1` */\n        alpha: number;\n        colorSpace: 'custom' | string;\n        customColorSpace: 'displayP3' | 'sRGB' | string;\n      }\n    /** Built-in color */\n    | {\n        systemColor: 'linkColor' | string;\n      }\n  )\n>;\n\nexport type IBFontDescription = IBItem<{\n  /** @example `fontDescription` */\n  key: string;\n  /** Font size */\n  pointSize: number;\n\n  /** Custom font */\n  name?: 'HelveticaNeue' | string;\n  family?: 'Helvetica Neue' | string;\n\n  /** Built-in font */\n  type?: 'system' | 'boldSystem' | 'UICTFontTextStyleCallout' | 'UICTFontTextStyleBody' | string;\n}>;\n\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\n\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\n\nexport type IBImageView = IBItem<\n  {\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    rect: IBRect[];\n  }\n>;\n\nexport type IBLabel = IBItem<\n  {\n    id: string;\n    /** The main value. */\n    text: string;\n\n    opaque: IBBoolean;\n    fixedFrame: IBBoolean;\n    textAlignment?: IBTextAlignment;\n    lineBreakMode:\n      | 'clip'\n      | 'characterWrap'\n      | 'wordWrap'\n      | 'headTruncation'\n      | 'middleTruncation'\n      | 'tailTruncation';\n    baselineAdjustment?: 'none' | 'alignBaselines';\n    adjustsFontSizeToFit: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: IBContentMode;\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    /** @example `<rect key=\"frame\" x=\"175\" y=\"670\" width=\"35\" height=\"17\"/>` */\n    rect: IBRect[];\n    /** @example `<autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>` */\n    autoresizingMask?: IBAutoresizingMask[];\n    /** @example `<fontDescription key=\"fontDescription\" type=\"system\" pointSize=\"19\"/>` */\n    fontDescription?: IBFontDescription[];\n    /** @example `<color key=\"textColor\" red=\"0.0\" green=\"0.0\" blue=\"0.0\" alpha=\"1\" colorSpace=\"custom\" customColorSpace=\"sRGB\"/>` */\n    color?: IBColor[];\n    nil?: IBItem<{\n      /** @example `textColor` `highlightedColor` */\n      key: string;\n    }>[];\n  }\n>;\n\nexport type IBTextAlignment = 'left' | 'center' | 'right' | 'justified' | 'natural';\n\nexport type IBContentMode = string | 'left' | 'scaleAspectFill';\n\nexport type IBConstraint = IBItem<{\n  firstItem: string;\n  firstAttribute: ConstraintAttribute;\n  secondItem: string;\n  secondAttribute: ConstraintAttribute;\n  constant?: number;\n  id: string;\n}>;\n\nexport type IBViewController = IBItem<\n  {\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n  },\n  {\n    view: IBItem<\n      {\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n      },\n      {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n          key: string;\n          flexibleMaxX: IBBoolean;\n          flexibleMaxY: IBBoolean;\n        }>[];\n\n        subviews: IBItem<\n          object,\n          {\n            imageView: IBImageView[];\n            label: IBLabel[];\n          }\n        >[];\n        color: IBItem<{\n          key: string | 'backgroundColor';\n          systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<\n          object,\n          {\n            constraint: IBConstraint[];\n          }\n        >[];\n        viewLayoutGuide: IBItem<{\n          id: string;\n          key: string | 'safeArea';\n        }>[];\n      }\n    >[];\n  }\n>;\n\nexport type IBPoint = IBItem<{\n  key: string | 'canvasLocation';\n  x: number;\n  y: number;\n}>;\n\nexport type IBScene = IBItem<\n  { sceneID: string },\n  {\n    objects: {\n      viewController: IBViewController[];\n      placeholder: IBItem<{\n        id: string;\n        placeholderIdentifier?: string;\n        userLabel: string;\n        sceneMemberID: string;\n      }>[];\n    }[];\n    point: IBPoint[];\n  }\n>;\n\nexport type IBResourceImage = IBItem<{\n  name: string;\n  width: number;\n  height: number;\n}>;\n\nexport type IBDevice = IBItem<{\n  id: string;\n  orientation: string | 'portrait';\n  appearance: string | 'light';\n}>;\n\nexport type IBSplashScreenDocument = {\n  document: IBItem<\n    {\n      type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n      version: '3.0' | string;\n      toolsVersion: number;\n      targetRuntime: 'iOS.CocoaTouch' | string;\n      propertyAccessControl: 'none' | string;\n      useAutolayout: IBBoolean;\n      launchScreen: IBBoolean;\n      useTraitCollections: IBBoolean;\n      useSafeAreas: IBBoolean;\n      colorMatched: IBBoolean;\n      initialViewController: string;\n    },\n    {\n      device: IBDevice[];\n      dependencies: unknown[];\n      scenes: {\n        scene: IBScene[];\n      }[];\n      resources: {\n        image: IBResourceImage[];\n      }[];\n    }\n  >;\n};\n\nexport function createConstraint(\n  [firstItem, firstAttribute]: [string, ConstraintAttribute],\n  [secondItem, secondAttribute]: [string, ConstraintAttribute],\n  constant?: number\n): IBConstraint {\n  return {\n    $: {\n      firstItem,\n      firstAttribute,\n      secondItem,\n      secondAttribute,\n      constant,\n      // Prevent updating between runs\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute),\n    },\n  };\n}\n\nexport function createConstraintId(...attributes: string[]) {\n  return crypto.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\n\nconst IMAGE_ID = 'EXPO-SplashScreen';\nconst CONTAINER_ID = 'EXPO-ContainerView';\n\nexport function removeImageFromSplashScreen(\n  xml: IBSplashScreenDocument,\n  { imageName }: { imageName: string }\n) {\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  debug(`Remove all splash screen image elements`);\n\n  removeExisting(mainView.subviews[0].imageView, IMAGE_ID);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    removeExisting(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    imageSection.splice(existingImageIndex, 1);\n  }\n  return xml;\n}\n\nfunction getAbsoluteConstraints(childId: string, parentId: string) {\n  return [\n    createConstraint([childId, 'top'], [parentId, 'top']),\n    createConstraint([childId, 'leading'], [parentId, 'leading']),\n    createConstraint([childId, 'trailing'], [parentId, 'trailing']),\n    createConstraint([childId, 'bottom'], [parentId, 'bottom']),\n  ];\n}\n\nexport function applyImageToSplashScreenXML(\n  xml: IBSplashScreenDocument,\n  {\n    imageName,\n    contentMode,\n  }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n  }\n): IBSplashScreenDocument {\n  const width = 414;\n  const height = 736;\n\n  const imageView: IBImageView = {\n    $: {\n      id: IMAGE_ID,\n      userLabel: imageName,\n      image: imageName,\n      contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false,\n    },\n    rect: [\n      {\n        $: {\n          key: 'frame',\n          x: 0.0,\n          y: 0.0,\n          width,\n          height,\n        },\n      },\n    ],\n  };\n\n  const mainView = xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0];\n\n  // Add ImageView\n  ensureUniquePush(mainView.subviews[0].imageView, imageView);\n\n  // Add Constraints\n  getAbsoluteConstraints(IMAGE_ID, CONTAINER_ID).forEach((constraint) => {\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    const constrainsArray = mainView.constraints[0].constraint;\n    ensureUniquePush(constrainsArray, constraint);\n  });\n\n  // Add resource\n  const imageSection = xml.document.resources[0].image;\n\n  const existingImageIndex = imageSection.findIndex((image) => image.$.name === imageName);\n  if (existingImageIndex > -1) {\n    debug(`Removing existing IB image asset at index ${existingImageIndex}`);\n    imageSection.splice(existingImageIndex, 1);\n  }\n  imageSection.push({\n    // <image name=\"SplashScreen\" width=\"414\" height=\"736\"/>\n    $: {\n      name: imageName,\n      width,\n      height,\n    },\n  });\n\n  return xml;\n}\n\n/**\n * IB does not allow two items to have the same ID.\n * This method will add an item by first removing any existing item with the same `$.id`.\n */\nexport function ensureUniquePush<TItem extends { $: { id: string } }>(array: TItem[], item: TItem) {\n  if (!array) return array;\n  removeExisting(array, item);\n  array.push(item);\n  return array;\n}\n\nexport function removeExisting<TItem extends { $: { id: string } }>(\n  array: TItem[],\n  item: TItem | string\n) {\n  const id = typeof item === 'string' ? item : item.$?.id;\n  const existingItem = array?.findIndex((existingItem) => existingItem.$.id === id);\n  if (existingItem > -1) {\n    debug(`Removing existing IB item with id ${id}, from: %O`, array);\n    array.splice(existingItem, 1);\n  }\n  return array;\n}\n\n// Attempt to copy Xcode formatting.\nexport function toString(xml: any): string {\n  const builder = new Builder({\n    // @ts-expect-error: untyped\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8',\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    ',\n    },\n  });\n  return builder.buildObject(xml);\n}\n\n/** Parse string contents into an object. */\nexport function toObjectAsync(contents: string) {\n  return new Parser().parseStringPromise(contents);\n}\n"],"mappings":"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"}
=======
{"version":3,"sources":["../../../../src/plugins/unversioned/expo-splash-screen/InterfaceBuilder.ts"],"names":["createConstraint","firstItem","firstAttribute","secondItem","secondAttribute","$","id","createConstraintId","attributes","crypto","createHash","update","join","digest","applyImageToSplashScreenXML","xml","imageName","contentMode","imageId","containerId","width","height","imageView","userLabel","image","horizontalHuggingPriority","verticalHuggingPriority","clipsSubviews","userInteractionEnabled","translatesAutoresizingMaskIntoConstraints","rect","key","x","y","document","scenes","scene","objects","viewController","view","subviews","push","constraints","constraint","resources","name","createTemplateSplashScreenAsync","contents","Parser","parseStringPromise","toString","builder","Builder","preserveChildrenOrder","xmldec","version","encoding","renderOpts","pretty","indent","buildObject"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;AAmKA,SAASA,gBAAT,CACE,CAACC,SAAD,EAAYC,cAAZ,CADF,EAEE,CAACC,UAAD,EAAaC,eAAb,CAFF,EAGgB;AACd,SAAO;AACLC,IAAAA,CAAC,EAAE;AACDJ,MAAAA,SADC;AAEDC,MAAAA,cAFC;AAGDC,MAAAA,UAHC;AAIDC,MAAAA,eAJC;AAKD;AACAE,MAAAA,EAAE,EAAEC,kBAAkB,CAACN,SAAD,EAAYC,cAAZ,EAA4BC,UAA5B,EAAwCC,eAAxC;AANrB;AADE,GAAP;AAUD;;AAED,SAASG,kBAAT,CAA4B,GAAGC,UAA/B,EAAqD;AACnD,SAAOC,kBAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCH,UAAU,CAACI,IAAX,CAAgB,GAAhB,CAAjC,EAAuDC,MAAvD,CAA8D,KAA9D,CAAP;AACD;;AAEM,SAASC,2BAAT,CACLC,GADK,EAEL;AACEC,EAAAA,SADF;AAEEC,EAAAA;AAFF,CAFK,EASmB;AACxB,QAAMC,OAAO,GAAG,mBAAhB;AACA,QAAMC,WAAW,GAAG,oBAApB;AACA,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,MAAM,GAAG,GAAf;AAEA,QAAMC,SAAsB,GAAG;AAC7BjB,IAAAA,CAAC,EAAE;AACDC,MAAAA,EAAE,EAAEY,OADH;AAEDK,MAAAA,SAAS,EAAEP,SAFV;AAGDQ,MAAAA,KAAK,EAAER,SAHN;AAIDC,MAAAA,WAJC;AAKDQ,MAAAA,yBAAyB,EAAE,GAL1B;AAMDC,MAAAA,uBAAuB,EAAE,GANxB;AAODC,MAAAA,aAAa,EAAE,IAPd;AAQDC,MAAAA,sBAAsB,EAAE,KARvB;AASDC,MAAAA,yCAAyC,EAAE;AAT1C,KAD0B;AAY7BC,IAAAA,IAAI,EAAE,CACJ;AACEzB,MAAAA,CAAC,EAAE;AACD0B,QAAAA,GAAG,EAAE,OADJ;AAEDC,QAAAA,CAAC,EAAE,GAFF;AAGDC,QAAAA,CAAC,EAAE,GAHF;AAIDb,QAAAA,KAJC;AAKDC,QAAAA;AALC;AADL,KADI;AAZuB,GAA/B,CANwB,CA+BxB;;AACAN,EAAAA,GAAG,CAACmB,QAAJ,CAAaC,MAAb,CAAoB,CAApB,EAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwC,CAAxC,EAA2CC,cAA3C,CAA0D,CAA1D,EAA6DC,IAA7D,CAAkE,CAAlE,EAAqEC,QAArE,CAA8E,CAA9E,EAAiFlB,SAAjF,CAA2FmB,IAA3F,CACEnB,SADF,EAhCwB,CAoCxB;;AACAP,EAAAA,GAAG,CAACmB,QAAJ,CAAaC,MAAb,CAAoB,CAApB,EAAuBC,KAAvB,CAA6B,CAA7B,EAAgCC,OAAhC,CAAwC,CAAxC,EAA2CC,cAA3C,CAA0D,CAA1D,EAA6DC,IAA7D,CAAkE,CAAlE,EAAqEG,WAArE,CAAiF,CAAjF,EAAoFC,UAApF,CAA+FF,IAA/F,EACE;AACAzC,EAAAA,gBAAgB,CAAC,CAACkB,OAAD,EAAU,KAAV,CAAD,EAAmB,CAACC,WAAD,EAAc,KAAd,CAAnB,CAFlB,EAGEnB,gBAAgB,CAAC,CAACkB,OAAD,EAAU,SAAV,CAAD,EAAuB,CAACC,WAAD,EAAc,SAAd,CAAvB,CAHlB,EAIEnB,gBAAgB,CAAC,CAACkB,OAAD,EAAU,UAAV,CAAD,EAAwB,CAACC,WAAD,EAAc,UAAd,CAAxB,CAJlB,EAKEnB,gBAAgB,CAAC,CAACkB,OAAD,EAAU,QAAV,CAAD,EAAsB,CAACC,WAAD,EAAc,QAAd,CAAtB,CALlB,EArCwB,CA6CxB;;AACAJ,EAAAA,GAAG,CAACmB,QAAJ,CAAaU,SAAb,CAAuB,CAAvB,EAA0BpB,KAA1B,CAAgCiB,IAAhC,CAAqC;AACnC;AACApC,IAAAA,CAAC,EAAE;AACDwC,MAAAA,IAAI,EAAE7B,SADL;AAEDI,MAAAA,KAFC;AAGDC,MAAAA;AAHC;AAFgC,GAArC;AASA,SAAON,GAAP;AACD;;AAEM,eAAe+B,+BAAf,GAAkF;AACvF,QAAMC,QAAQ,GAAI;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAzEE;AA0EA,SAAO,MAAM,KAAIC,gBAAJ,IAAaC,kBAAb,CAAgCF,QAAhC,CAAb;AACD,C,CAED;;;AACO,SAASG,QAAT,CAAkBnC,GAAlB,EAAoC;AACzC,QAAMoC,OAAO,GAAG,KAAIC,iBAAJ,EAAY;AAC1BC,IAAAA,qBAAqB,EAAE,IADG;AAE1BC,IAAAA,MAAM,EAAE;AACNC,MAAAA,OAAO,EAAE,KADH;AAENC,MAAAA,QAAQ,EAAE;AAFJ,KAFkB;AAM1BC,IAAAA,UAAU,EAAE;AACVC,MAAAA,MAAM,EAAE,IADE;AAEVC,MAAAA,MAAM,EAAE;AAFE;AANc,GAAZ,CAAhB;AAWA,SAAOR,OAAO,CAACS,WAAR,CAAoB7C,GAApB,CAAP;AACD","sourcesContent":["import crypto from 'crypto';\nimport { Builder, Parser } from 'xml2js';\n\nexport type IBBoolean = 'YES' | 'NO' | boolean;\n\nexport type IBItem<\n  H extends Record<string, any>,\n  B extends Record<string, any[]> = { [key: string]: any }\n> = {\n  $: H;\n} & B;\n\nexport type Rect = {\n  key: string;\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n};\n\nexport type IBRect = IBItem<Rect>;\n\nexport type ImageContentMode = 'scaleAspectFit' | 'scaleAspectFill';\n\nexport type ConstraintAttribute = 'top' | 'bottom' | 'trailing' | 'leading';\n\nexport type IBImageView = IBItem<\n  {\n    id: string;\n    userLabel: string;\n    image: string;\n    clipsSubviews?: IBBoolean;\n    userInteractionEnabled: IBBoolean;\n    contentMode: string | 'scaleAspectFill';\n    horizontalHuggingPriority: number;\n    verticalHuggingPriority: number;\n    insetsLayoutMarginsFromSafeArea?: IBBoolean;\n    translatesAutoresizingMaskIntoConstraints?: IBBoolean;\n  },\n  {\n    rect: IBRect[];\n  }\n>;\n\nexport type IBConstraint = IBItem<{\n  firstItem: string;\n  firstAttribute: ConstraintAttribute;\n  secondItem: string;\n  secondAttribute: ConstraintAttribute;\n  id: string;\n}>;\n\nexport type IBViewController = IBItem<\n  {\n    id: string;\n    placeholderIdentifier?: string;\n    userLabel: string;\n    sceneMemberID: string;\n  },\n  {\n    view: IBItem<\n      {\n        id: string;\n        key: string;\n        userInteractionEnabled: IBBoolean;\n        contentMode: string | 'scaleToFill';\n        insetsLayoutMarginsFromSafeArea: IBBoolean;\n        userLabel: string;\n      },\n      {\n        rect: IBRect[];\n        autoresizingMask: IBItem<{\n          key: string;\n          flexibleMaxX: IBBoolean;\n          flexibleMaxY: IBBoolean;\n        }>[];\n\n        subviews: IBItem<\n          object,\n          {\n            imageView: IBImageView[];\n          }\n        >[];\n        color: IBItem<{\n          key: string | 'backgroundColor';\n          systemColor: string | 'systemBackgroundColor';\n        }>[];\n        constraints: IBItem<\n          object,\n          {\n            constraint: IBConstraint[];\n          }\n        >[];\n        viewLayoutGuide: IBItem<{\n          id: string;\n          key: string | 'safeArea';\n        }>[];\n      }\n    >[];\n  }\n>;\n\nexport type IBPoint = IBItem<{\n  key: string | 'canvasLocation';\n  x: number;\n  y: number;\n}>;\n\nexport type IBScene = IBItem<\n  { sceneID: string },\n  {\n    objects: {\n      viewController: IBViewController[];\n      placeholder: IBItem<{\n        id: string;\n        placeholderIdentifier?: string;\n        userLabel: string;\n        sceneMemberID: string;\n      }>[];\n    }[];\n    point: IBPoint[];\n  }\n>;\n\ntype IBResourceImage = IBItem<{\n  name: string;\n  width: number;\n  height: number;\n}>;\n\ntype IBDevice = IBItem<{\n  id: string;\n  orientation: string | 'portrait';\n  appearance: string | 'light';\n}>;\n\nexport type IBSplashScreenDocument = {\n  document: IBItem<\n    {\n      type: 'com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB' | string;\n      version: '3.0' | string;\n      toolsVersion: number;\n      targetRuntime: 'iOS.CocoaTouch' | string;\n      propertyAccessControl: 'none' | string;\n      useAutolayout: IBBoolean;\n      launchScreen: IBBoolean;\n      useTraitCollections: IBBoolean;\n      useSafeAreas: IBBoolean;\n      colorMatched: IBBoolean;\n      initialViewController: string;\n    },\n    {\n      device: IBDevice[];\n      dependencies: unknown[];\n      scenes: {\n        scene: IBScene[];\n      }[];\n      resources: {\n        image: IBResourceImage[];\n      }[];\n    }\n  >;\n};\n\nfunction createConstraint(\n  [firstItem, firstAttribute]: [string, ConstraintAttribute],\n  [secondItem, secondAttribute]: [string, ConstraintAttribute]\n): IBConstraint {\n  return {\n    $: {\n      firstItem,\n      firstAttribute,\n      secondItem,\n      secondAttribute,\n      // Prevent updating between runs\n      id: createConstraintId(firstItem, firstAttribute, secondItem, secondAttribute),\n    },\n  };\n}\n\nfunction createConstraintId(...attributes: string[]) {\n  return crypto.createHash('sha1').update(attributes.join('-')).digest('hex');\n}\n\nexport function applyImageToSplashScreenXML(\n  xml: IBSplashScreenDocument,\n  {\n    imageName,\n    contentMode,\n  }: {\n    imageName: string;\n    contentMode: ImageContentMode;\n  }\n): IBSplashScreenDocument {\n  const imageId = 'EXPO-SplashScreen';\n  const containerId = 'EXPO-ContainerView';\n  const width = 414;\n  const height = 736;\n\n  const imageView: IBImageView = {\n    $: {\n      id: imageId,\n      userLabel: imageName,\n      image: imageName,\n      contentMode,\n      horizontalHuggingPriority: 251,\n      verticalHuggingPriority: 251,\n      clipsSubviews: true,\n      userInteractionEnabled: false,\n      translatesAutoresizingMaskIntoConstraints: false,\n    },\n    rect: [\n      {\n        $: {\n          key: 'frame',\n          x: 0.0,\n          y: 0.0,\n          width,\n          height,\n        },\n      },\n    ],\n  };\n\n  // Add ImageView\n  xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0].subviews[0].imageView.push(\n    imageView\n  );\n\n  // Add Constraints\n  xml.document.scenes[0].scene[0].objects[0].viewController[0].view[0].constraints[0].constraint.push(\n    // <constraint firstItem=\"EXPO-SplashScreen\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"2VS-Uz-0LU\"/>\n    createConstraint([imageId, 'top'], [containerId, 'top']),\n    createConstraint([imageId, 'leading'], [containerId, 'leading']),\n    createConstraint([imageId, 'trailing'], [containerId, 'trailing']),\n    createConstraint([imageId, 'bottom'], [containerId, 'bottom'])\n  );\n\n  // Add resource\n  xml.document.resources[0].image.push({\n    // <image name=\"SplashScreen\" width=\"414\" height=\"736\"/>\n    $: {\n      name: imageName,\n      width,\n      height,\n    },\n  });\n\n  return xml;\n}\n\nexport async function createTemplateSplashScreenAsync(): Promise<IBSplashScreenDocument> {\n  const contents = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    <document\n      type=\"com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB\"\n      version=\"3.0\"\n      toolsVersion=\"16096\"\n      targetRuntime=\"iOS.CocoaTouch\"\n      propertyAccessControl=\"none\"\n      useAutolayout=\"YES\"\n      launchScreen=\"YES\"\n      useTraitCollections=\"YES\"\n      useSafeAreas=\"YES\"\n      colorMatched=\"YES\"\n      initialViewController=\"EXPO-VIEWCONTROLLER-1\"\n    >\n      <device id=\"retina5_5\" orientation=\"portrait\" appearance=\"light\"/>\n      <dependencies>\n        <deployment identifier=\"iOS\"/>\n        <plugIn identifier=\"com.apple.InterfaceBuilder.IBCocoaTouchPlugin\" version=\"16087\"/>\n        <capability name=\"Safe area layout guides\" minToolsVersion=\"9.0\"/>\n        <capability name=\"documents saved in the Xcode 8 format\" minToolsVersion=\"8.0\"/>\n      </dependencies>\n      <scenes>\n        <!--View Controller-->\n        <scene sceneID=\"EXPO-SCENE-1\">\n          <objects>\n            <viewController\n              storyboardIdentifier=\"SplashScreenViewController\"\n              id=\"EXPO-VIEWCONTROLLER-1\"\n              sceneMemberID=\"viewController\"\n            >\n              <view\n                key=\"view\"\n                userInteractionEnabled=\"NO\"\n                contentMode=\"scaleToFill\"\n                insetsLayoutMarginsFromSafeArea=\"NO\"\n                id=\"EXPO-ContainerView\"\n                userLabel=\"ContainerView\"\n              >\n                <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"736\"/>\n                <autoresizingMask key=\"autoresizingMask\" flexibleMaxX=\"YES\" flexibleMaxY=\"YES\"/>\n                <subviews>\n                  <imageView\n                    userInteractionEnabled=\"NO\"\n                    contentMode=\"scaleAspectFill\"\n                    horizontalHuggingPriority=\"251\"\n                    verticalHuggingPriority=\"251\"\n                    insetsLayoutMarginsFromSafeArea=\"NO\"\n                    image=\"SplashScreenBackground\"\n                    translatesAutoresizingMaskIntoConstraints=\"NO\"\n                    id=\"EXPO-SplashScreenBackground\"\n                    userLabel=\"SplashScreenBackground\"\n                  >\n                    <rect key=\"frame\" x=\"0.0\" y=\"0.0\" width=\"414\" height=\"736\"/>\n                  </imageView>\n                </subviews>\n                <color key=\"backgroundColor\" systemColor=\"systemBackgroundColor\"/>\n                <constraints>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"top\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"top\" id=\"1gX-mQ-vu6\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"leading\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"leading\" id=\"6tX-OG-Sck\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"trailing\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"trailing\" id=\"ABX-8g-7v4\"/>\n                  <constraint firstItem=\"EXPO-SplashScreenBackground\" firstAttribute=\"bottom\" secondItem=\"EXPO-ContainerView\" secondAttribute=\"bottom\" id=\"jkI-2V-eW5\"/>\n                </constraints>\n                <viewLayoutGuide key=\"safeArea\" id=\"Rmq-lb-GrQ\"/>\n              </view>\n            </viewController>\n            <placeholder placeholderIdentifier=\"IBFirstResponder\" id=\"EXPO-PLACEHOLDER-1\" userLabel=\"First Responder\" sceneMemberID=\"firstResponder\"/>\n          </objects>\n          <point key=\"canvasLocation\" x=\"140.625\" y=\"129.4921875\"/>\n        </scene>\n      </scenes>\n      <resources>\n        <image name=\"SplashScreenBackground\" width=\"1\" height=\"1\"/>\n      </resources>\n    </document>`;\n  return await new Parser().parseStringPromise(contents);\n}\n\n// Attempt to copy Xcode formatting.\nexport function toString(xml: any): string {\n  const builder = new Builder({\n    preserveChildrenOrder: true,\n    xmldec: {\n      version: '1.0',\n      encoding: 'UTF-8',\n    },\n    renderOpts: {\n      pretty: true,\n      indent: '    ',\n    },\n  });\n  return builder.buildObject(xml);\n}\n"],"file":"InterfaceBuilder.js"}
>>>>>>> 279c076d3cb6520341221d8adc510e9dbdcbb7c2
