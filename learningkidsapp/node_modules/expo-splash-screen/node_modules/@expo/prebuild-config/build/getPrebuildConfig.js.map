<<<<<<< HEAD
{"version":3,"file":"getPrebuildConfig.js","names":["_config","data","require","_getAutolinkedPackages","_withDefaultPlugins","getPrebuildConfigAsync","projectRoot","props","autolinkedModules","getAutolinkedPackagesAsync","platforms","getPrebuildConfig","bundleIdentifier","packageName","exp","config","rest","getConfig","skipSDKVersionRequirement","isModdedConfig","_internal","withVersionedExpoSDKPlugins","withLegacyExpoPlugins","includes","ios","withIosExpoPlugins","android","package","withAndroidExpoPlugins"],"sources":["../src/getPrebuildConfig.ts"],"sourcesContent":["import { getConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\n\nimport { getAutolinkedPackagesAsync } from './getAutolinkedPackages';\nimport {\n  withAndroidExpoPlugins,\n  withIosExpoPlugins,\n  withLegacyExpoPlugins,\n  withVersionedExpoSDKPlugins,\n} from './plugins/withDefaultPlugins';\n\nexport async function getPrebuildConfigAsync(\n  projectRoot: string,\n  props: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n  }\n): Promise<ReturnType<typeof getConfig>> {\n  const autolinkedModules = await getAutolinkedPackagesAsync(projectRoot, props.platforms);\n\n  return getPrebuildConfig(projectRoot, {\n    ...props,\n    autolinkedModules,\n  });\n}\n\nfunction getPrebuildConfig(\n  projectRoot: string,\n  {\n    platforms,\n    bundleIdentifier,\n    packageName,\n    autolinkedModules,\n  }: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n    autolinkedModules?: string[];\n  }\n) {\n  // let config: ExpoConfig;\n  let { exp: config, ...rest } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  if (autolinkedModules) {\n    if (!config._internal) {\n      config._internal = {};\n    }\n    config._internal.autolinkedModules = autolinkedModules;\n  }\n\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withVersionedExpoSDKPlugins(config);\n  config = withLegacyExpoPlugins(config);\n\n  if (platforms.includes('ios')) {\n    if (!config.ios) config.ios = {};\n    config.ios.bundleIdentifier =\n      bundleIdentifier ?? config.ios.bundleIdentifier ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withIosExpoPlugins(config, {\n      bundleIdentifier: config.ios.bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    if (!config.android) config.android = {};\n    config.android.package = packageName ?? config.android.package ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withAndroidExpoPlugins(config, {\n      package: config.android.package,\n    });\n  }\n\n  return { exp: config, ...rest };\n}\n"],"mappings":";;;;;;AAAA,SAAAA,QAAA;EAAA,MAAAC,IAAA,GAAAC,OAAA;EAAAF,OAAA,YAAAA,CAAA;IAAA,OAAAC,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAGA,SAAAE,uBAAA;EAAA,MAAAF,IAAA,GAAAC,OAAA;EAAAC,sBAAA,YAAAA,CAAA;IAAA,OAAAF,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AACA,SAAAG,oBAAA;EAAA,MAAAH,IAAA,GAAAC,OAAA;EAAAE,mBAAA,YAAAA,CAAA;IAAA,OAAAH,IAAA;EAAA;EAAA,OAAAA,IAAA;AAAA;AAOO,eAAeI,sBAAsBA,CAC1CC,WAAmB,EACnBC,KAIC,EACsC;EACvC,MAAMC,iBAAiB,GAAG,MAAM,IAAAC,mDAA0B,EAACH,WAAW,EAAEC,KAAK,CAACG,SAAS,CAAC;EAExF,OAAOC,iBAAiB,CAACL,WAAW,EAAE;IACpC,GAAGC,KAAK;IACRC;EACF,CAAC,CAAC;AACJ;AAEA,SAASG,iBAAiBA,CACxBL,WAAmB,EACnB;EACEI,SAAS;EACTE,gBAAgB;EAChBC,WAAW;EACXL;AAMF,CAAC,EACD;EACA;EACA,IAAI;IAAEM,GAAG,EAAEC,MAAM;IAAE,GAAGC;EAAK,CAAC,GAAG,IAAAC,mBAAS,EAACX,WAAW,EAAE;IACpDY,yBAAyB,EAAE,IAAI;IAC/BC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEF,IAAIX,iBAAiB,EAAE;IACrB,IAAI,CAACO,MAAM,CAACK,SAAS,EAAE;MACrBL,MAAM,CAACK,SAAS,GAAG,CAAC,CAAC;IACvB;IACAL,MAAM,CAACK,SAAS,CAACZ,iBAAiB,GAAGA,iBAAiB;EACxD;;EAEA;EACA;EACAO,MAAM,GAAG,IAAAM,iDAA2B,EAACN,MAAM,CAAC;EAC5CA,MAAM,GAAG,IAAAO,2CAAqB,EAACP,MAAM,CAAC;EAEtC,IAAIL,SAAS,CAACa,QAAQ,CAAC,KAAK,CAAC,EAAE;IAC7B,IAAI,CAACR,MAAM,CAACS,GAAG,EAAET,MAAM,CAACS,GAAG,GAAG,CAAC,CAAC;IAChCT,MAAM,CAACS,GAAG,CAACZ,gBAAgB,GACzBA,gBAAgB,IAAIG,MAAM,CAACS,GAAG,CAACZ,gBAAgB,IAAK,uBAAsB;;IAE5E;IACAG,MAAM,GAAG,IAAAU,wCAAkB,EAACV,MAAM,EAAE;MAClCH,gBAAgB,EAAEG,MAAM,CAACS,GAAG,CAACZ;IAC/B,CAAC,CAAC;EACJ;EAEA,IAAIF,SAAS,CAACa,QAAQ,CAAC,SAAS,CAAC,EAAE;IACjC,IAAI,CAACR,MAAM,CAACW,OAAO,EAAEX,MAAM,CAACW,OAAO,GAAG,CAAC,CAAC;IACxCX,MAAM,CAACW,OAAO,CAACC,OAAO,GAAGd,WAAW,IAAIE,MAAM,CAACW,OAAO,CAACC,OAAO,IAAK,uBAAsB;;IAEzF;IACAZ,MAAM,GAAG,IAAAa,4CAAsB,EAACb,MAAM,EAAE;MACtCY,OAAO,EAAEZ,MAAM,CAACW,OAAO,CAACC;IAC1B,CAAC,CAAC;EACJ;EAEA,OAAO;IAAEb,GAAG,EAAEC,MAAM;IAAE,GAAGC;EAAK,CAAC;AACjC"}
=======
{"version":3,"sources":["../src/getPrebuildConfig.ts"],"names":["getPrebuildConfigAsync","projectRoot","props","autolinkedModules","platforms","getPrebuildConfig","bundleIdentifier","packageName","expoUsername","exp","config","rest","skipSDKVersionRequirement","isModdedConfig","_internal","resolvedExpoUsername","includes","ios","android","package"],"mappings":";;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAOO,eAAeA,sBAAf,CACLC,WADK,EAELC,KAFK,EAQkC;AACvC,QAAMC,iBAAiB,GAAG,MAAM,yDAA2BF,WAA3B,EAAwCC,KAAK,CAACE,SAA9C,CAAhC;AAEA,SAAOC,iBAAiB,CAACJ,WAAD,EAAc,EACpC,GAAGC,KADiC;AAEpCC,IAAAA;AAFoC,GAAd,CAAxB;AAID;;AAED,SAASE,iBAAT,CACEJ,WADF,EAEE;AACEG,EAAAA,SADF;AAEEE,EAAAA,gBAFF;AAGEC,EAAAA,WAHF;AAIEJ,EAAAA,iBAJF;AAKEK,EAAAA;AALF,CAFF,EAeE;AACA;AACA,MAAI;AAAEC,IAAAA,GAAG,EAAEC,MAAP;AAAe,OAAGC;AAAlB,MAA2B,yBAAUV,WAAV,EAAuB;AACpDW,IAAAA,yBAAyB,EAAE,IADyB;AAEpDC,IAAAA,cAAc,EAAE;AAFoC,GAAvB,CAA/B;;AAKA,MAAIV,iBAAJ,EAAuB;AACrB,QAAI,CAACO,MAAM,CAACI,SAAZ,EAAuB;AACrBJ,MAAAA,MAAM,CAACI,SAAP,GAAmB,EAAnB;AACD;;AACDJ,IAAAA,MAAM,CAACI,SAAP,CAAiBX,iBAAjB,GAAqCA,iBAArC;AACD;;AAED,QAAMY,oBAAoB,GACxB,OAAOP,YAAP,KAAwB,UAAxB,GACIA,YAAY,CAACE,MAAD,CADhB,GAEI;AACAF,EAAAA,YAHJ,aAGIA,YAHJ,cAGIA,YAHJ,GAGoB,kCAAmBE,MAAnB,CAJtB,CAdA,CAoBA;AACA;;AACAA,EAAAA,MAAM,GAAG,uDAA4BA,MAA5B,EAAoC;AAC3CF,IAAAA,YAAY,EAAEO;AAD6B,GAApC,CAAT;AAGAL,EAAAA,MAAM,GAAG,iDAAsBA,MAAtB,CAAT;;AAEA,MAAIN,SAAS,CAACY,QAAV,CAAmB,KAAnB,CAAJ,EAA+B;AAAA;;AAC7B,QAAI,CAACN,MAAM,CAACO,GAAZ,EAAiBP,MAAM,CAACO,GAAP,GAAa,EAAb;AACjBP,IAAAA,MAAM,CAACO,GAAP,CAAWX,gBAAX,WACEA,gBADF,aACEA,gBADF,cACEA,gBADF,GACsBI,MAAM,CAACO,GAAP,CAAWX,gBADjC,uCACsD,uBADtD,CAF6B,CAK7B;;AACAI,IAAAA,MAAM,GAAG,8CAAmBA,MAAnB,EAA2B;AAClCJ,MAAAA,gBAAgB,EAAEI,MAAM,CAACO,GAAP,CAAWX;AADK,KAA3B,CAAT;AAGD;;AAED,MAAIF,SAAS,CAACY,QAAV,CAAmB,SAAnB,CAAJ,EAAmC;AAAA;;AACjC,QAAI,CAACN,MAAM,CAACQ,OAAZ,EAAqBR,MAAM,CAACQ,OAAP,GAAiB,EAAjB;AACrBR,IAAAA,MAAM,CAACQ,OAAP,CAAeC,OAAf,YAAyBZ,WAAzB,aAAyBA,WAAzB,cAAyBA,WAAzB,GAAwCG,MAAM,CAACQ,OAAP,CAAeC,OAAvD,yCAAmE,uBAAnE,CAFiC,CAIjC;;AACAT,IAAAA,MAAM,GAAG,kDAAuBA,MAAvB,EAA+B;AACtCS,MAAAA,OAAO,EAAET,MAAM,CAACQ,OAAP,CAAeC;AADc,KAA/B,CAAT;AAGD;;AAED,SAAO;AAAEV,IAAAA,GAAG,EAAEC,MAAP;AAAe,OAAGC;AAAlB,GAAP;AACD","sourcesContent":["import { getAccountUsername, getConfig } from '@expo/config';\nimport { ModPlatform } from '@expo/config-plugins';\nimport { ExpoConfig } from '@expo/config-types';\n\nimport { getAutolinkedPackagesAsync } from './getAutolinkedPackages';\nimport {\n  withAndroidExpoPlugins,\n  withIosExpoPlugins,\n  withLegacyExpoPlugins,\n  withVersionedExpoSDKPlugins,\n} from './plugins/withDefaultPlugins';\n\nexport async function getPrebuildConfigAsync(\n  projectRoot: string,\n  props: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n    expoUsername?: string | ((config: ExpoConfig) => string | null);\n  }\n): Promise<ReturnType<typeof getConfig>> {\n  const autolinkedModules = await getAutolinkedPackagesAsync(projectRoot, props.platforms);\n\n  return getPrebuildConfig(projectRoot, {\n    ...props,\n    autolinkedModules,\n  });\n}\n\nfunction getPrebuildConfig(\n  projectRoot: string,\n  {\n    platforms,\n    bundleIdentifier,\n    packageName,\n    autolinkedModules,\n    expoUsername,\n  }: {\n    bundleIdentifier?: string;\n    packageName?: string;\n    platforms: ModPlatform[];\n    autolinkedModules?: string[];\n    expoUsername?: string | ((config: ExpoConfig) => string | null);\n  }\n) {\n  // let config: ExpoConfig;\n  let { exp: config, ...rest } = getConfig(projectRoot, {\n    skipSDKVersionRequirement: true,\n    isModdedConfig: true,\n  });\n\n  if (autolinkedModules) {\n    if (!config._internal) {\n      config._internal = {};\n    }\n    config._internal.autolinkedModules = autolinkedModules;\n  }\n\n  const resolvedExpoUsername =\n    typeof expoUsername === 'function'\n      ? expoUsername(config)\n      : // If the user didn't pass a username then fallback on the static cached username.\n        expoUsername ?? getAccountUsername(config);\n\n  // Add all built-in plugins first because they should take\n  // priority over the unversioned plugins.\n  config = withVersionedExpoSDKPlugins(config, {\n    expoUsername: resolvedExpoUsername,\n  });\n  config = withLegacyExpoPlugins(config);\n\n  if (platforms.includes('ios')) {\n    if (!config.ios) config.ios = {};\n    config.ios.bundleIdentifier =\n      bundleIdentifier ?? config.ios.bundleIdentifier ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withIosExpoPlugins(config, {\n      bundleIdentifier: config.ios.bundleIdentifier,\n    });\n  }\n\n  if (platforms.includes('android')) {\n    if (!config.android) config.android = {};\n    config.android.package = packageName ?? config.android.package ?? `com.placeholder.appid`;\n\n    // Add all built-in plugins\n    config = withAndroidExpoPlugins(config, {\n      package: config.android.package,\n    });\n  }\n\n  return { exp: config, ...rest };\n}\n"],"file":"getPrebuildConfig.js"}
>>>>>>> 279c076d3cb6520341221d8adc510e9dbdcbb7c2
